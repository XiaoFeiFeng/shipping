//less使用   1、服务端编译  2、客户端解析

//npm install less -g

//1、变量——Variables
//注：在Less中的变量实际上就是一个“常量”，因为它们只能被定义一次。（查看1.4 变量覆盖）

//1.1、定义变量
@color: #4d926f;

/*1、1定义变量*/
#color1 {
  color: @color;
}

.color1 {
  color: @color;
}

//1.2 变量运算
@newColor: @color+#111;
/*1.2 变量运算*/
.color2 {
  color: @newColor;
}

//1.3 定义变量为变量名

@colorName: "newColor";

/*1.3 定义变量为变量名*/
.color3 {
  color: @@colorName;
}

//1.4 变量覆盖

@color: #ff3636;

/*1.4变量覆盖*/
.color4 {
  color: @color;
}

/*1.5 lazy load*/

@a: 20%;

.lazy-eval-scope {
  width: @var1;
  @a: 9%;
  @a: 19%;
}

.lazy-eval-scope2 {
  width: @var1;
}

@var1: @a;
@a: 100%;

@a: 15%;
//2、混入——Mixins

/* 2.1 定义一个类  */
.border-radius {
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  border-radius: 5px;
}

//带括号和不带括号决定是否在css中应用类本身
.border-radius-2-1() {
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  border-radius: 5px;
}

/* 2.1混入——Mixins  类作为变量*/
.borderRadius1 {
  .border-radius;
}

//2.2混入参数
.border-radius2(@radius:5px) {
  -moz-border-radius: @radius;
  -webkit-border-radius: @radius;
  border-radius: @radius;
}

.borderRadius2 {
  //比较.borderRadius1  没有参数的时候带不带括号一样
  .border-radius2();
}

#borderRadius2 {
  .border-radius2(10px);
}

//2.3 @arguments 包含所有属性

.boxShadow(@x:0,@y:0,@blur:1px,@color:#000) {
  -moz-box-shadow: @arguments;
  -webkit-box-shadow: @arguments;
  box-shadow: @arguments;
}

.boxShadow1 {
  .boxShadow(2px, 2px, 3px, #f36221);
}

// 接受 0-N 个参数
.mixin (...) {
  border: @arguments;
}

// 不接受任何参数
.mixin () {
  border: @arguments;
}

// 接受 0-1 个参数
.mixin (@a: 1) {
  border: @arguments;
}

// 接受 0-N 个参数
.mixin (@a: 1, ...) {
  border: @arguments;
}

// 接受 1-N 个参数
.mixin (@a, ...) {
  border: @arguments;
}

.mixin(@a,@rest...) {
  // @rest 表示 @a 之后的参数
  // @arguments 表示所有参数
  border: @arguments;
  rest: @rest;
  a: @a;
}

.mixin(@color; @padding; @margin: 2px) {
  color-3: @color;
  padding-3: @padding;
  margin: @margin @margin @margin @margin;
}

/**@arguments*/
.someminxin {
  // .mixin(#008000, 12px);
  .mixin(#008000, 13px) !important;
}

//3 嵌套规则  模仿HTML的DOM结构来写
/**嵌套 规则 */
#header {
  display: inline;
  float: left;
  h1 {
    font-size: 26px;
    font-weight: bold;
    a {
      text-decoration: none;
      color: #f36;
      &:hover {
        text-decoration: underline;
        color: #63f;
      }
    }
  }
  p {
    font-size: 12px;
    &:hover{
      color: #f36;
    }
  }
}

//3.1 嵌套规则操作伪元素，如:hover，:link,:focus等

/*3.1 嵌套规则操作伪元素，如:hover，:link,:focus等*/
a {
  color: red;
  text-decoration: none;
  &:hover {
    color: blue;
    text-decoration: underline;
  }
  &:link {
    color: yellow;
    text-decoration: line-through;
  }
}

//3.2  "&" 的作用

/* 3.2  "&" 的作用*/
#header {
  &.fl {
    float: left;
  }
  .mln {
    margin-left: 0;
  }
}

//4  Functions & Operations  函数 和 运算

//Less中的Operations主要是针对任何数字、颜色、变量的操作，可以对其是行加、减、、乘、除或者更复杂的综合运算；而Functions主要是针对Color funtions，Less提供了多种变换颜色的功能
//使用括号“（）”来改变其运算的先后顺序

//http://less.bootcss.com/functions
/* 函数 和 运算*/
@the-border: 1px;
@base-color: #111;
@red: #842210;
#header {
  color: @base-color *3;
  border: 1px solid desaturate(@red, 100%);
  border-width: @the-border @the-border*2 @the-border*3 @the-border;
  border-color: desaturate(@red, 100%) @red lighten(@red, 10%) darken(@red, 30%);
}

//5 命名空间
/*命名控件*/
.namespaces {
  .button () {
    display: block;
    border: 1px solid black;
    background-color: grey;
    &:hover {
      background-color: white
    }
  }
  .text-red {
    color: red;
    font-size: 12px;
  }
}

#header a {
  color: orange;
  .namespaces > .button;
}

.header .span {
  //color: blue;
  .namespaces> .text-red;
}

//6 变量作用域

/*变量作用域*/
@var: yellow;

#page {
  @var: white;
  #header {
    color: @var; // white
  }
}

#footer {
  color: @var; // red
}

//7 运算和判断

/*@switch*/

.mixin-color (dark, @color) {
  color: darken(@color, 10%);
}

.mixin-color (light, @color) {
  color: lighten(@color, 10%);
}

.mixin-color (@_, @color) {
  display: block;
}

@switch: light;

.class {
  .mixin-color(@switch, #888);
}

/* when */

// iscolor
// isnumber
// isstring
// iskeyword
// isurl
// ispixel
// ispercentage
// isem

.mixin-when (@a) when (@a>= 10) {
  background-color: black;
}

.mixin-when (@a) when (@a< 10) {
  background-color: white;
}

.mixin-when (@a) when (@a< 50) {
  background-color: white;
}

.mixin-when (@a) {
  color: @a;
}

.mixin (@a) when (@a > 10), (@a < -10) {

}

//以使用关键词 and 在 guard 中加入额外的条件:
.mixin (@a) when (isnumber(@a)) and (@a > 0) {

}

//或者，使用关键词 not 否定条件：
.mixin (@b) when not (@b > 0) {
}

.class1 {
  .mixin-when(1)
}

.class2 {
  .mixin-when(20)
}

.class2 {
  .mixin-when(60)
}

/* & 特殊用法*/

.child, .sibling {
  .parent & {
    color: black;
  }
  & + & {
    color: red;
  }
}

/*字符串插值*/

@base-url: "http://assets.fnord.com";
.class3 {
  background-image: url("@{base-url}/images/bg.png");
}

/*选择器插值*/

@name: blocked;
.@{name} {
  color: black;
}

/*javascript 运算*/
//
//@str: "hello";
//
//@toUpper: "hello".toUpperCase();
//@toUpper2: "@{str}".toUpperCase() + '!';

